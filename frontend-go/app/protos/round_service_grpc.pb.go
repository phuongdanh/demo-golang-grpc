// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoundServiceClient is the client API for RoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoundServiceClient interface {
	List(ctx context.Context, in *ListRoundRequest, opts ...grpc.CallOption) (*ListRoundResponse, error)
	Get(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*GetRoundResponse, error)
	Create(ctx context.Context, in *CreateRoundRequest, opts ...grpc.CallOption) (*CreateRoundResponse, error)
	Update(ctx context.Context, in *UpdateRoundRequest, opts ...grpc.CallOption) (*UpdateRoundResponse, error)
	Delte(ctx context.Context, in *DeleteRoundRequest, opts ...grpc.CallOption) (*DeleteRoundResponse, error)
}

type roundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoundServiceClient(cc grpc.ClientConnInterface) RoundServiceClient {
	return &roundServiceClient{cc}
}

func (c *roundServiceClient) List(ctx context.Context, in *ListRoundRequest, opts ...grpc.CallOption) (*ListRoundResponse, error) {
	out := new(ListRoundResponse)
	err := c.cc.Invoke(ctx, "/protos.RoundService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) Get(ctx context.Context, in *GetRoundRequest, opts ...grpc.CallOption) (*GetRoundResponse, error) {
	out := new(GetRoundResponse)
	err := c.cc.Invoke(ctx, "/protos.RoundService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) Create(ctx context.Context, in *CreateRoundRequest, opts ...grpc.CallOption) (*CreateRoundResponse, error) {
	out := new(CreateRoundResponse)
	err := c.cc.Invoke(ctx, "/protos.RoundService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) Update(ctx context.Context, in *UpdateRoundRequest, opts ...grpc.CallOption) (*UpdateRoundResponse, error) {
	out := new(UpdateRoundResponse)
	err := c.cc.Invoke(ctx, "/protos.RoundService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) Delte(ctx context.Context, in *DeleteRoundRequest, opts ...grpc.CallOption) (*DeleteRoundResponse, error) {
	out := new(DeleteRoundResponse)
	err := c.cc.Invoke(ctx, "/protos.RoundService/Delte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoundServiceServer is the server API for RoundService service.
// All implementations must embed UnimplementedRoundServiceServer
// for forward compatibility
type RoundServiceServer interface {
	List(context.Context, *ListRoundRequest) (*ListRoundResponse, error)
	Get(context.Context, *GetRoundRequest) (*GetRoundResponse, error)
	Create(context.Context, *CreateRoundRequest) (*CreateRoundResponse, error)
	Update(context.Context, *UpdateRoundRequest) (*UpdateRoundResponse, error)
	Delte(context.Context, *DeleteRoundRequest) (*DeleteRoundResponse, error)
	mustEmbedUnimplementedRoundServiceServer()
}

// UnimplementedRoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoundServiceServer struct {
}

func (*UnimplementedRoundServiceServer) List(context.Context, *ListRoundRequest) (*ListRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRoundServiceServer) Get(context.Context, *GetRoundRequest) (*GetRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRoundServiceServer) Create(context.Context, *CreateRoundRequest) (*CreateRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRoundServiceServer) Update(context.Context, *UpdateRoundRequest) (*UpdateRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRoundServiceServer) Delte(context.Context, *DeleteRoundRequest) (*DeleteRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delte not implemented")
}
func (*UnimplementedRoundServiceServer) mustEmbedUnimplementedRoundServiceServer() {}

func RegisterRoundServiceServer(s *grpc.Server, srv RoundServiceServer) {
	s.RegisterService(&_RoundService_serviceDesc, srv)
}

func _RoundService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RoundService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).List(ctx, req.(*ListRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RoundService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).Get(ctx, req.(*GetRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RoundService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).Create(ctx, req.(*CreateRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RoundService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).Update(ctx, req.(*UpdateRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_Delte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).Delte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RoundService/Delte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).Delte(ctx, req.(*DeleteRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoundService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RoundService",
	HandlerType: (*RoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RoundService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoundService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RoundService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoundService_Update_Handler,
		},
		{
			MethodName: "Delte",
			Handler:    _RoundService_Delte_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "round_service.proto",
}
