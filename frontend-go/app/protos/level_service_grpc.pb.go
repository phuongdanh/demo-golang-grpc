// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LevelServiceClient is the client API for LevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LevelServiceClient interface {
	List(ctx context.Context, in *ListLevelRequest, opts ...grpc.CallOption) (*ListLevelResponse, error)
	Get(ctx context.Context, in *GetLevelRequest, opts ...grpc.CallOption) (*GetLevelResponse, error)
	Create(ctx context.Context, in *CreateLevelRequest, opts ...grpc.CallOption) (*CreateLevelResponse, error)
	Update(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*UpdateLevelResponse, error)
	Delete(ctx context.Context, in *DeleteLevelRequest, opts ...grpc.CallOption) (*DeleteLevelResponse, error)
}

type levelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelServiceClient(cc grpc.ClientConnInterface) LevelServiceClient {
	return &levelServiceClient{cc}
}

func (c *levelServiceClient) List(ctx context.Context, in *ListLevelRequest, opts ...grpc.CallOption) (*ListLevelResponse, error) {
	out := new(ListLevelResponse)
	err := c.cc.Invoke(ctx, "/protos.LevelService/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelServiceClient) Get(ctx context.Context, in *GetLevelRequest, opts ...grpc.CallOption) (*GetLevelResponse, error) {
	out := new(GetLevelResponse)
	err := c.cc.Invoke(ctx, "/protos.LevelService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelServiceClient) Create(ctx context.Context, in *CreateLevelRequest, opts ...grpc.CallOption) (*CreateLevelResponse, error) {
	out := new(CreateLevelResponse)
	err := c.cc.Invoke(ctx, "/protos.LevelService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelServiceClient) Update(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*UpdateLevelResponse, error) {
	out := new(UpdateLevelResponse)
	err := c.cc.Invoke(ctx, "/protos.LevelService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelServiceClient) Delete(ctx context.Context, in *DeleteLevelRequest, opts ...grpc.CallOption) (*DeleteLevelResponse, error) {
	out := new(DeleteLevelResponse)
	err := c.cc.Invoke(ctx, "/protos.LevelService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelServiceServer is the server API for LevelService service.
// All implementations must embed UnimplementedLevelServiceServer
// for forward compatibility
type LevelServiceServer interface {
	List(context.Context, *ListLevelRequest) (*ListLevelResponse, error)
	Get(context.Context, *GetLevelRequest) (*GetLevelResponse, error)
	Create(context.Context, *CreateLevelRequest) (*CreateLevelResponse, error)
	Update(context.Context, *UpdateLevelRequest) (*UpdateLevelResponse, error)
	Delete(context.Context, *DeleteLevelRequest) (*DeleteLevelResponse, error)
	mustEmbedUnimplementedLevelServiceServer()
}

// UnimplementedLevelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLevelServiceServer struct {
}

func (*UnimplementedLevelServiceServer) List(context.Context, *ListLevelRequest) (*ListLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedLevelServiceServer) Get(context.Context, *GetLevelRequest) (*GetLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLevelServiceServer) Create(context.Context, *CreateLevelRequest) (*CreateLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedLevelServiceServer) Update(context.Context, *UpdateLevelRequest) (*UpdateLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLevelServiceServer) Delete(context.Context, *DeleteLevelRequest) (*DeleteLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLevelServiceServer) mustEmbedUnimplementedLevelServiceServer() {}

func RegisterLevelServiceServer(s *grpc.Server, srv LevelServiceServer) {
	s.RegisterService(&_LevelService_serviceDesc, srv)
}

func _LevelService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LevelService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).List(ctx, req.(*ListLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LevelService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LevelService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).Get(ctx, req.(*GetLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LevelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LevelService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).Create(ctx, req.(*CreateLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LevelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LevelService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).Update(ctx, req.(*UpdateLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LevelService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.LevelService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelServiceServer).Delete(ctx, req.(*DeleteLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LevelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LevelService",
	HandlerType: (*LevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _LevelService_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _LevelService_Get_Handler,
		},
		{
			MethodName: "create",
			Handler:    _LevelService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _LevelService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _LevelService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "level_service.proto",
}
